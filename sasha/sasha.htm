<html></html>

<head>
    <title>Sasha Rabeno - INFO 5100 Final Project</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
      
    .gridlines line {
      stroke: #bbb;
    }
    
    .gridlines .domain {
      stroke: none;
    }

    body {
            margin: 0;
            display: flex;
            background-color: #000;
            color: #fff;
            font-family: Arial, sans-serif;
        }

        h1 {
            color: #76c7c0;
            margin: 10px 0;
            font-size: 20px;
        }

        #scatterplot {
            flex-grow: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
        }

        text {
            font-size: 14px;
            fill: #fff;
        }

        
        button {
            background-color: #FFF; /* Green background */
            color: black; /* White text */
            padding: 10px 24px; /* Some padding */
            cursor: pointer; /* Pointer/hand icon */
            float: left; /* Float the buttons side by side */
        }
        

    </style>
</head>

<body>
    <div id="graph">
        
        <div id="button-bar"></div>
        <svg id="scatterplot" height="600" width="1000"></svg>
    
       
    
        <script>
                
        let svg = d3.select("svg#scatterplot");

        const colors = {
        Normal: "#A8A77A", Fire: "#EE8130", Water: "#6390F0", Electric: "#F7D02C", Grass: "#7AC74C",
        Ice: "#96D9D6", Fighting: "#C22E28", Poison: "#A33EA1", Ground: "#E2BF65", Flying: "#A98FF3",
        Psychic: "#F95587", Bug: "#A6B91A", Rock: "#B6A136", Ghost: "#735797", Dragon: "#6F35FC",
        Dark: "#705746", Steel: "#B7B7CE", Fairy: "#D685AD"
        };

        const width = svg.attr("width");
        const height = svg.attr("height");
        const margin = { top: 60, right: 40, bottom: 40, left: 40 };

        const chartWidth = width - margin.left - margin.right;
        const chartHeight = height - margin.top - margin.bottom;

        let annotations = svg.append("g").attr("id","annotations");
        let chartArea = svg.append("g").attr("id", "points")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


         d3.json("type_occurrences.json", d3.autoType)
        .then( (occurData) => {


            // y-axis == count
            let leftAxis = d3.axisLeft()
            let leftAxisG = annotations.append("g")
                               .attr("class", "y axis")
                               .attr("transform",`translate(${margin.bottom},${chartHeight-chartHeight+margin.top})`)
                

            // Extent of Types (x axis)
            const types = ["Normal", "Fighting", "Flying", "Poison", "Ground", "Rock", "Bug", "Ghost", "Steel", "Fire", "Water", "Grass", "Electric", "Psychic", "Ice", "Dragon", "Dark", "Fairy"]
            const typeScale = d3.scaleBand().domain(types).range([0, chartWidth]);


            // x-axis == type
            let bottomAxis = d3.axisBottom(typeScale);
            let bottomAxisG = annotations.append("g")
                               .attr("class", "x axis")
                               .attr("transform",`translate(${margin.left},${chartHeight+margin.top+10})`)





        function updateBarsAnimated(genKey) {
        
        const barData = occurData[genKey];

        function getGenExtent(genKey) { // I calculated these manually in Excel
            if (genKey === "All") return [0,130]
            if (genKey === "Gen1") return [0,36]
            if (genKey === "Gen2") return [0,19]
            if (genKey === "Gen3") return [0,31]
            if (genKey === "Gen4") return [0,18]
            if (genKey === "Gen5") return [0,21]
            if (genKey === "Gen6") return [0,15]
        }


        // Type counts (y axis)
        const typeCountExtent = getGenExtent(genKey);
        const typeCountScale = d3.scaleLinear().domain(typeCountExtent).range([chartHeight, 0]);

      

        // Update and animate left axis
        leftAxis.scale(typeCountScale)
        leftAxisG.transition().call(leftAxis);

        // bottomAxis.scale(typeScale)
        bottomAxisG.transition().call(bottomAxis);
        

        // The data join with the actual data
        var bars = chartArea.selectAll('rect.bar').data(barData, d=>d['Type'])
                 .join( enter => enter.append('rect')
                                      .attr('class','bar')
                                      .attr("fill",  d => colors[d.Type])
                                      .attr("x",  d => typeScale(d.Type))
                                      .attr("y", d => typeCountScale(d.Occurrences))
                                      .attr("height", d => typeCountScale(0) - typeCountScale(d.Occurrences))
                                      .attr("width", typeScale.bandwidth())
                                      .attr("opacity", 0) 
                                      .call( enter => enter.transition()
                                                           .attr('opacity',1) ),
                        update => update.call( update => update.transition() 
                                                               .attr("fill",  d => colors[d.Type])
                                                               .attr("x",  d => typeScale(d.Type))
                                                               .attr("y", d => typeCountScale(d.Occurrences))
                                                               .attr("height", d => typeCountScale(0) - typeCountScale(d.Occurrences))
                                                               .attr("width", typeScale.bandwidth()) ),
                        exit => exit.call( exit => exit.transition().attr('opacity',0).remove() ) );
        


                bars.on("mouseover", function () {

                    d3.select(this)
                        .transition()
                        .duration(100)
                        .attr("stroke-width", 2)
                        .attr("stroke", "white")  


                    let type = d3.select(this).datum()['Type']
                    let occurrences = d3.select(this).datum()['Occurrences']

                    chartArea.append("rect")    // text box background for improved visibility
                        .attr("class", "textboxbg")
                        .attr('x', 50)
                        .attr('y', 0)
                        .attr('width', 150)
                        .attr('height', 45)
                        .attr('stroke', 'none')
                        .attr('rx', 15)
                        .attr('fill', colors[type]);

                    chartArea.append("text")
                        .attr("class", "label")
                        .attr("x", 70)
                        .attr("y", 20)
                        .attr("text-anchor", "start")
                        .style("fill", "black")
                        .style("font-size", "18px")
                        .text("Type: " + type );

                    chartArea.append("text")
                        .attr("class", "label")
                        .attr("x", 70)
                        .attr("y", 40)
                        .attr("text-anchor", "start")
                        .style("font-size", "18px")
                        .style("fill", "black")
                        .text( "Count: " + occurrences  );


                       
                })


                        
                // Mouseout
                bars.on("mouseout", function () { // first argument is always a string for the event. second arg for us is a function

                    d3.select(this)
                        .transition()
                        .duration(200)
                        .attr("stroke-width", 0)
                        .attr("stroke", "none")

                    chartArea.selectAll(".label")
                        .attr("opacity", 0);

                    
                    chartArea.selectAll(".textboxbg")
                        .style("fill", "none")
                }) 

     
      }   


      const genKeys = ["All", "Gen1", "Gen2", "Gen3", "Gen4", "Gen5", "Gen6"];
      genKeys.forEach( gen => {
        d3.select("div#button-bar")
          .append("button")
          .text(
            function(){
                if(gen==="All") return gen
                if(gen==="Gen1") return "Generation 1 (Kanto)"
                if (gen === "Gen2") return "Generation 2 (Johto)"
                if (gen === "Gen3") return "Generation 3 (Hoenn)"
                if (gen === "Gen4") return "Generation 4 (Sinnoh)"
                if (gen === "Gen5") return "Generation 5 (Unova)"
                if (gen === "Gen6") return "Generation 6 (Kalos)"
            }
          )
          .on("click", function() {
            updateBarsAnimated(gen);
            changeImage(gen);
            changeText(gen);
          })
      });

    



        chartArea.append("text")
        .attr("x", ((width - 80) / 2))             
        .attr("y", 0 - (margin.top / 4))
        .attr("text-anchor", "middle")  
        .style("font-size", "18px")
        .style("font-weight", "bold")
        .text("Type Distributions by Generation");



        updateBarsAnimated("All");


        });


        function changeImage(gen) {
                var img = document.getElementById("image");
                if(gen==="All") img.src = "https://assets.pokemon.com/assets/cms2/img/pokedex/full//025.png";
                if(gen==="Gen1") img.src = "https://assets.pokemon.com/assets/cms2/img/pokedex/full//001.png";
                if (gen === "Gen2") img.src = "https://assets.pokemon.com/assets/cms2/img/pokedex/full//155.png";
                if (gen === "Gen3") img.src = "https://assets.pokemon.com/assets/cms2/img/pokedex/full//258.png";
                if (gen === "Gen4") img.src = "https://assets.pokemon.com/assets/cms2/img/pokedex/full//393.png";
                if (gen === "Gen5") img.src = "https://assets.pokemon.com/assets/cms2/img/pokedex/full//495.png";
                if (gen === "Gen6") img.src = "https://assets.pokemon.com/assets/cms2/img/pokedex/full//653.png";
                
                return false;
        }

        function changeText(gen) {
                var text = document.getElementById("fun fact text");
                if(gen==="All") text.innerHTML = "The most popular type overall is Water!";
                if(gen==="Gen1") text.innerHTML = "Generation 1 has tons of Poison types, but mainly as a secondary type."
                if (gen === "Gen2") text.innerHTML = "Generation 2 introduced the Dark and Steel types, which were retroactively applied to a handful of Kanto Pokemon.";
                if (gen === "Gen3") text.innerHTML = "Being a water-based island region, it is no surprise Hoenn has an abundance of Water types!";
                if (gen === "Gen4") text.innerHTML = "Generation 4 is known for its dismal lack of available Fire types; half of the six available are from the same evolution line (Chimchar).";
                if (gen === "Gen5") text.innerHTML = "The most popular type in Generation 5 is Flying, narrowly beating out Grass.";
                if (gen === "Gen6") text.innerHTML = "Generation 6 introduced the Fairy type, which was applied to 22 older Pokemon!";
                return false;
        }



    </script>

</div>

<div id="fun facts">
    <p id="fun fact text">Click any button to get started!</p>
    <br>
    <img id="image" src="https://assets.pokemon.com/assets/cms2/img/pokedex/full//501.png" alt="poke-pic" width="200" height="200">
    <br>
    <br>
    <img id="pikachu" src="info_5100_pikachu.png" alt="poke-pic" width="200" height="200">


</div>
<br>


</body>
</html>